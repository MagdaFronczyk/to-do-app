{"version":3,"sources":["components/Note.jsx","components/NoteForm.jsx","Config/config.js","components/App.js","serviceWorker.js","index.js"],"names":["Note","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","noteContent","noteId","handleRemoveNote","bind","assertThisInitialized","id","removeNote","_this2","react_default","a","createElement","className","onClick","Component","propTyps","PropTypes","string","NoteForm","state","newNoteContent","handleUserInput","writeNote","e","setState","target","value","addNote","placeholder","onChange","type","React","DB_CONFIG","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","App","app","firebase","initializeApp","database","ref","child","notes","previousNotes","on","snap","push","key","val","i","length","splice","note","set","remove","_this3","map","components_Note","components_NoteForm","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cea690ad.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Note extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.noteContent = props.noteContent; //pobieramy z propsów przekazanych w App\r\n        this.noteId = props.noteId; //pobieramy z propsów przekazanych w App\r\n        this.handleRemoveNote = this.handleRemoveNote.bind(this);\r\n    }\r\n\r\n    handleRemoveNote(id) {\r\n        this.props.removeNote(id);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"body_note\">\r\n                <p className=\"note_content\">{this.noteContent}</p>\r\n                <span className=\"note_button\" onClick={()=> this.handleRemoveNote(this.noteId)}>\r\n                    &times;\r\n                </span>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nNote.propTyps = {\r\n    noteContent: PropTypes.string\r\n};\r\nexport default Note;","import React, {Component} from 'react';\r\n\r\nclass NoteForm extends React.Component {\r\n   constructor(props) {\r\n   super(props);\r\n        this.state = {\r\n            newNoteContent:\"\",\r\n        };\r\n\r\n        this.handleUserInput = this.handleUserInput.bind(this);\r\n        this.writeNote = this.writeNote.bind(this);\r\n   }\r\n\r\n   handleUserInput(e) {\r\n       this.setState({\r\n           newNoteContent: e.target.value,\r\n       })\r\n   }\r\n\r\n   writeNote(){\r\n\r\n       this.props.addNote(this.state.newNoteContent); //na kliku wysylamy zawartość statu newNoteContent,który zawiera obecną notatke\r\n\r\n       this.setState({ //na kliku czyscimy tez placeholder\r\n           newNoteContent: '',\r\n       })\r\n   }\r\n\r\n   render(){\r\n     return (\r\n\r\n         <div className=\"footer_form\">\r\n             <input className=\"form_input\"\r\n             placeholder=\"Write a note ...\"\r\n             value={this.state.newNoteContent}\r\n             onChange={this.handleUserInput}\r\n             type=\"text\"/>\r\n             <button className=\"form_button\"\r\n             onClick={this.writeNote}>Add Note</button>\r\n         </div>\r\n\r\n     )\r\n   }\r\n }\r\n\r\n export default NoteForm;","export const DB_CONFIG = {\r\n    apiKey: \"AIzaSyDU1VLC40mZ-q8h1kWzMJS6Vjok7VDzyOA\",\r\n    authDomain: \"react-notes-fb061.firebaseapp.com\",\r\n    databaseURL: \"https://react-notes-fb061.firebaseio.com\",\r\n    projectId: \"react-notes-fb061\",\r\n    storageBucket: \"react-notes-fb061.appspot.com\",\r\n    messagingSenderId: \"1066401313806\"\r\n};\r\n\r\n","import React, {Component} from 'react';\nimport Note from './Note'\nimport NoteForm from './NoteForm'\nimport \"../scss/_Main.scss\"\nimport {DB_CONFIG} from \"../Config/config\";\nimport firebase from 'firebase/app';\nimport 'firebase/database'\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.addNote = this.addNote.bind(this); //przyklejamy this aby wskazywał na komponent App\n        this.removeNote = this.removeNote.bind(this);\n        this.app = firebase.initializeApp(DB_CONFIG);\n        this.database = this.app.database().ref().child('notes');\n\n        this.state = { //notatki przechowujemy w stacie, będą się zmieniać\n            notes: [],\n        }\n    }\n\n    componentWillMount() {\n        const previousNotes = this.state.notes;\n\n        this.database.on('child_added', snap => {\n            previousNotes.push({\n                id: snap.key,\n                noteContent: snap.val().noteContent,\n            });\n\n            this.setState({\n                notes: previousNotes\n            });\n\n        });\n\n        this.database.on('child_removed', snap => {\n            for (let i = 0; i < previousNotes.length; i++) {\n                if (previousNotes[i].id === snap.key) {\n                    previousNotes.splice(i, 1);\n                }\n            }\n\n            this.setState({\n                notes: previousNotes\n            });\n\n        });\n    }\n\n    addNote(note) {\n        this.database.push().set({noteContent: note});\n    }\n\n    removeNote(noteId) {\n        this.database.child(noteId).remove();\n    }\n\n    render() {\n        return (\n            <div className=\"notes\">\n                <div className=\"header_container\">\n                    <header className=\"notes_header container\">\n                        <h1 className=\"header_title\">To-Do List</h1>\n                    </header>\n                </div>\n                <div className=\"body_container\">\n                    <article className=\"notes_body container\">\n                        {\n                            this.state.notes.map((note) => { //mapujemy tablicę ze state'ów aby wyświetlić Note na stronie, \"note\" to jeden obiekt z tablicy, po \".\" dostajemy się do zawartości\n                                return (\n                                    <Note noteContent={note.noteContent}\n                                          noteId={note.id}\n                                          key={note.id}\n                                          removeNote={this.removeNote}/> //tworzymy komponenty Notes na podtawie głownej klasy,mają propsy, które pojawiają się w konstruktorze,przyjmują wartości ze statów\n                                )\n                            })\n                        }\n                    </article>\n                </div>\n                <div className=\"footer_container\">\n                    <footer className=\"notes_footer container\">\n                        <NoteForm addNote={this.addNote}/>\n                    </footer>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}